name: Build and Publish to PyPI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Force publish to PyPI'
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e ".[dev]"
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src/greenplanet_energy_api --cov-report=xml
        
    - name: Run linting
      run: |
        python -m black --check src/ tests/
        python -m ruff check src/ tests/
        python -m mypy src/
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      current_version: ${{ steps.version_check.outputs.current_version }}
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Check if version changed
      id: version_check
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if this version exists on PyPI
        PYPI_CHECK=$(pip index versions greenplanet-energy-api 2>/dev/null | grep -c "$CURRENT_VERSION" || echo "0")
        if [ "$PYPI_CHECK" -eq "0" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION is new, will publish"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "Version $CURRENT_VERSION already exists on PyPI"
        fi
        
    - name: Build package
      if: steps.version_check.outputs.version_changed == 'true' || github.event.inputs.publish == 'true'
      run: |
        python -m build
        
    - name: Check package
      if: steps.version_check.outputs.version_changed == 'true' || github.event.inputs.publish == 'true'
      run: |
        python -m twine check dist/*
        
    - name: Upload build artifacts
      if: steps.version_check.outputs.version_changed == 'true' || github.event.inputs.publish == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        
  publish:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: needs.build.outputs.version_changed == 'true' || github.event.inputs.publish == 'true'
    environment: pypi
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for creating releases
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        print-hash: true
        
    - name: Create GitHub Release
      if: success()
      uses: ncipollo/create-release@v1
      with:
        tag: v${{ needs.build.outputs.current_version }}
        name: Release v${{ needs.build.outputs.current_version }}
        body: |
          Automated release of greenplanet-energy-api v${{ needs.build.outputs.current_version }}
          
          ## Installation
          ```bash
          pip install greenplanet-energy-api==${{ needs.build.outputs.current_version }}
          ```
        draft: false
        prerelease: false
        generateReleaseNotes: true
